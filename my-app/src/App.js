import React, { useState } from "react";
import axios from "axios";
import './App.css';
import {getAllUsers, createPost, updatePost, deletePost, getAllPosts} from './api.js';


const API_URL = "http://127.0.0.1:8000";  // Backend API URL'nizi buraya yazÄ±n

const App = () => {
    const [users, setUsers] = useState([]);
    const [userId, setUserId] = useState("");
    const [userIdToUpdate, setUserIdToUpdate] = useState("");
    const [userIdToDelete, setUserIdToDelete] = useState("");
    const [newUsername, setNewUsername] = useState("");
    const [newName, setNewName] = useState("");
    const [newPassword, setNewPassword] = useState("");
    const [userGetId, setUserGetId] = useState("");
     const [user, setUser] = useState({}); // user state'ini tanÄ±mladÄ±k
    const[selectedUserId, setSelectedUserId] = useState("");
    const [inputUserId, setInputUserId] = useState("");

    const[posts, setPosts] = useState([]);
      const [selectedPost, setSelectedPost] = useState(null);
    const[updatedContent, setUpdatedContent] = useState(null);
    const [content, setContent] = useState("");
     const[postGetId, setPostGetId] = useState("");
    const[postIdToUpdate, setPostIdToUpdate] = useState("");
    const[postIdToDelete, setPostIdToDelete] = useState("");
    const[postPredictId, setPostPredictId] = useState("");
    const[predict, setPredict] = useState(null);
    const[newPost, setNewPost] = useState(null);
    const[predictId, setPredictId] = useState("");



    // KullanÄ±cÄ± oluÅŸturma iÅŸlemi
    const handleCreateUser = async () => {
        const username = prompt("KullanÄ±cÄ± AdÄ±nÄ±zÄ± Girin:");
        const name = prompt("AdÄ±nÄ±zÄ± Girin:");
        const password = prompt("Åžifrenizi Girin:");

        if (!username || !name || !password) {
            alert("TÃ¼m alanlar doldurulmalÄ±dÄ±r.");
            return;
        }

        try {
            const response = await axios.post(`${API_URL}/users/users/users/`, {
                username,
                name,
                password
            });
            alert(`KullanÄ±cÄ± oluÅŸturuldu! ID: ${response.data.id}`);
        } catch (error) {
            console.error("KullanÄ±cÄ± oluÅŸturulurken hata oluÅŸtu:", error);
            alert("KullanÄ±cÄ± oluÅŸturulamadÄ±!");
        }
    };
//CREATE POSTS
    const handleCreatePost = async () => {
        if (!userId  || !content) {
            alert("KullanÄ±cÄ± ve post iÃ§eriÄŸi girilmelidir!");
            return;
        }
        try {
            const newPost = await createPost(userId, content);
            setPosts(prevPosts => Array.isArray(prevPosts) ? [...prevPosts, newPost] : [newPost]);  // Yeni postu state'e ekle
            setUsers(prevUsers =>
            prevUsers.map(user =>
                user.id === parseInt(userId) ? { ...user, posts: [...user.posts, newPost] } : user
                )
            );
            setContent("");  // Input alanÄ±nÄ± temizle
            alert("GÃ¶nderi baÅŸarÄ±yla oluÅŸturuldu!");
        } catch (error) {
            console.error("GÃ¶nderi oluÅŸturulurken hata oluÅŸtu:", error);
            alert("GÃ¶nderi oluÅŸturulamadÄ±!");
        }
    };
//POST SÄ°LME
const handleDeletePost = async () => {
    if (!postIdToDelete) {
        alert("LÃ¼tfen silmek istediÄŸiniz post ID'sini girin!");
        return;
    }

    try {
        await axios.delete(`${API_URL}/posts/posts/delete_post/${postIdToDelete}`);

        // Post silindikten sonra posts state'ini gÃ¼ncelle
        setPosts(prevPosts => prevPosts.filter(post => post.id !== parseInt(postIdToDelete)));

        // Postu kullanÄ±cÄ±larÄ±n posts listelerinden de Ã§Ä±kar
        setUsers(prevUsers =>
            prevUsers.map(user => ({
                ...user,
                posts: user.posts ? user.posts.filter(post => post.id !== parseInt(postIdToDelete)) : []
            }))
        );

        alert("Post baÅŸarÄ±yla silindi!");
    } catch (error) {
        console.error("Post silinirken bir hata oluÅŸtu:", error);
        alert("Post silinemedi!");
    }
};
  const handleUpdatePost = async () => {
    if (!postIdToUpdate) {
        alert("Post ID'sini girin!");
        return;
    }
    const newPostContent = prompt("LÃ¼tfen yeni post iÃ§eriÄŸini giriniz:");
    if (!newPostContent) {
        alert("DoldurmalÄ±sÄ±nÄ±z");
        return;
    }

    try {
        // GÃ¼ncellenecek postu bul
        const postToUpdate = posts.find(post => post.id === parseInt(postIdToUpdate));

        if (!postToUpdate) {
            alert("Post bulunamadÄ±!");
            return;
        }

        const response = await axios.put(`${API_URL}/posts/posts/update_post/${postIdToUpdate}`, {
            post: newPostContent,
            user_id: postToUpdate.user_id  // ðŸ”¥ Eksik olan user_id'yi ekledik
        });

        setPosts(prevPosts =>
            prevPosts.map(post =>
                post.id === parseInt(postIdToUpdate) ? response.data : post
            )
        );
        alert("Post baÅŸarÄ±yla gÃ¼ncellendi!");
    } catch (error) {
        console.error("Post gÃ¼ncellenirken bir hata oluÅŸtu:", error);
        alert("Post gÃ¼ncellenemedi!");
    }
};
    const handleListPost = async () =>{
        try{
            const postData = await getAllPosts();
            setPosts(postData);
        }catch(error){
            console.log("Postlar listelenirken bir sorun oluÅŸtu")
            alert("Post alÄ±namadÄ±")
        }
    };



    // KullanÄ±cÄ±yÄ± gÃ¼ncelleme iÅŸlemi
    const handleUpdateUser = async () => {
        if (!userIdToUpdate) {
            alert("LÃ¼tfen gÃ¼ncellemek iÃ§in kullanÄ±cÄ± ID'sini girin!");
            return;
        }

        const newUsername = prompt("Yeni kullanÄ±cÄ± adÄ±nÄ±zÄ± giriniz");
        const newName = prompt("Yeni adÄ±nÄ±zÄ± giriniz");
        const newPassword = prompt("Yeni ÅŸifrenizi giriniz");

        if (!newUsername || !newName || !newPassword) {
            alert("TÃ¼m alanlarÄ± doldurmalÄ±sÄ±nÄ±z.");
            return;
        }

        try {
            const response = await axios.put(`${API_URL}/users/users/update_user/${userIdToUpdate}`, {
                username: newUsername,
                name: newName,
                password: newPassword
            });
            setUsers(prevUsers =>
                prevUsers.map(user =>
                    user.id === parseInt(userIdToUpdate) ? response.data : user
                )
            );
                        alert("KullanÄ±cÄ± gÃ¼ncellendi!");
        } catch (error) {
            console.error("KullanÄ±cÄ± gÃ¼ncellenirken hata oluÅŸtu:", error);
            alert("KullanÄ±cÄ± gÃ¼ncellenemedi!");
        }
    };
        // KullanÄ±cÄ±larÄ± listeleme iÅŸlemi
    const handleListUser = async () => {
        try {
           const userData = await getAllUsers();
           setUsers(userData);

        } catch (error) {
            console.error("KullanÄ±cÄ±lar listelenirken hata oluÅŸtu:", error);
            alert("KullanÄ±cÄ± listesi alÄ±namadÄ±!");
        }
    };

    // KullanÄ±cÄ±yÄ± silme iÅŸlemi
    const handleDeleteUser = async () => {
        if (!userIdToDelete) {
            alert("LÃ¼tfen silmek istediÄŸiniz kullanÄ±cÄ± ID'sini girin!");
            return;
        }

        const confirmDelete = window.confirm(`KullanÄ±cÄ± ID ${userIdToDelete} silinecek. Emin misiniz?`);
        if (!confirmDelete) return;

        try {
            await axios.delete(`${API_URL}/users/users/delete_user/${userIdToDelete}`);
            setUsers(prevUsers => prevUsers.filter(user => user.id !== parseInt(userIdToDelete)));
            alert("KullanÄ±cÄ± baÅŸarÄ±yla silindi!");
        } catch (error) {
            console.error("KullanÄ±cÄ± silinirken hata oluÅŸtu:", error);
            alert("KullanÄ±cÄ± silinemedi!");
        }
    };
    const handleGetUser = async () =>{
        if (!userGetId) {
            alert("LÃ¼tfen gÃ¶runtulemek istediÄŸiniz kullanÄ±cÄ± ID'sini girin!");
            return;
        }
        try{
            const response =await axios.get(`${API_URL}/users/users/users/${userGetId}`)
            setUser(response.data);
        } catch (error) {
            console.error("KullanÄ±cÄ±lar listelenirken hata oluÅŸtu:", error);
            alert("KullanÄ±cÄ±  alÄ±namadÄ±!");
        }
    };
    const handleGetPost = async () => {
    if (!postGetId) {
        alert("LÃ¼tfen gÃ¶rmek istediÄŸiniz postun ID'sini girin!");
        return;
    }
    try {
        const response = await axios.get(`${API_URL}/posts/posts/posts/${postGetId}`);
        console.log("Gelen post:", response.data); // Gelen veriyi kontrol et
        setSelectedPost(response.data);
    } catch (error) {
        console.log("Post gÃ¶rÃ¼ntÃ¼lenirken hata oluÅŸtu:", error);
        alert("Post alÄ±namadÄ±!");
    }
};



    const handlePredictPost = async () => {
      if (!postPredictId){
          alert("id girin")
          return;
      }
      try{
          const response = await axios.get(`${API_URL}/posts/posts/post_predict/${postPredictId}`);
          setPredict(response.data.prediction);
      }catch (error){
          console.log("hata");
          alert("alÄ±namadÄ±");
      }


    };



    return (
        <div className="main-container">
            {/* SOL BÃ–LÃœM */}
            <div className="left-div">
                <div className="button-group">
                    <div className="action-container">
                        <button className="action-btn" onClick={handleCreateUser}>KullanÄ±cÄ± OluÅŸtur</button>
                    </div>
                    <div className="action-container">
                        <button className="action-btn" onClick={handleListUser}>KullanÄ±cÄ±larÄ± Listele</button>
                    </div>
                    <div className="user-list">
                        <h3>KullanÄ±cÄ±lar:</h3>
                        <ul>
                            {users.map(user => (
                                <li key={user.id}>{user.username} - {user.name}</li>
                            ))}
                        </ul>
                    </div>
                    <div className="action-container">
                        <button className="action-btn" onClick={handleUpdateUser}>KullanÄ±cÄ± GÃ¼ncelle</button>
                        <input
                            type="number"
                            placeholder="KullanÄ±cÄ± ID girin"
                            value={userIdToUpdate}
                            onChange={(e) => setUserIdToUpdate(e.target.value)}
                        />
                    </div>
                    <div className="action-container">
                        <button className="action-btn" onClick={handleDeleteUser}>KullanÄ±cÄ± Sil</button>
                        <input type="number"
                               placeholder="KullanÄ±cÄ± ID girin"
                               value={userIdToDelete}
                               onChange={(e) => setUserIdToDelete((e.target.value))}
                        />
                    </div>
                    <div className="action-container">
                        <button className="action-btn" onClick={handleGetUser}>KullanÄ±cÄ±yÄ± GÃ¶rÃ¼ntÃ¼le</button>
                        <input
                            type="number"
                            placeholder="KullanÄ±cÄ± ID girin"
                            value={userGetId}
                            onChange={(e) => setUserGetId(e.target.value)}
                        />
                    </div>

                    <div className="user-details">
                        <h3>KullanÄ±cÄ± Bilgisi:</h3>
                        <p>{user ? `${user.name} - ${user.username}` : ' '}</p>
                    </div>



                </div>
            </div>

            {/* SAÄž BÃ–LÃœM */}
            <div className="right-div">
                <div className="button-group">
                    <div className="action-container">
                        <button className="action-btn" onClick={handleCreatePost}>GÃ¶nderi OluÅŸtur</button>
                        <input
                            type="number"
                            placeholder="KullanÄ±cÄ± ID girin"
                            value={userId}
                            onChange={(e) => setUserId(e.target.value)} // KullanÄ±cÄ± ID'sini alÄ±yoruz
                        />
                          <textarea
                        placeholder="Post iÃ§eriÄŸini girin"
                        value={content}
                        onChange={(e) => setContent(e.target.value)}/>
                    </div>
                    <div className="action-container">
                        <button className="action-btn" onClick={handleListPost}>PostlarÄ± Listele</button>
                    </div>

                    <div className="user-list">
                        <div className="post-list">
                            <h3>Postlar:</h3>
                            <ul>
                                {posts.length > 0 ? (
                                    posts.map(post => (
                                        <li key={post.id}>{post.post}</li>
                                    ))
                                ) : (
                                    <li></li>
                                )}
                            </ul>
                        </div>
                    </div>
                    <div className="action-container">
                        <button className="action-btn" onClick={handleUpdatePost}>Post GÃ¼ncelle</button>
                        <input
                            type="number"
                            placeholder="Post ID girin"
                            value={postIdToUpdate}
                            onChange={(e) => setPostIdToUpdate(e.target.value)}
                        />
                    </div>
                    <div className="action-container">
                        <button className="action-btn" onClick={handleDeletePost}>Postu Sil</button>
                        <input type="number"
                               placeholder="Post ID girin"
                               value={postIdToDelete}
                               onChange={(e) => setPostIdToDelete(e.target.value)}
                        />
                    </div>
                    <div className="action-container">
                        <button className="action-btn" onClick={handleGetPost}>Postu GÃ¶rÃ¼ntÃ¼le</button>
                        <input type="number"
                               placeholder="Post ID girin"
                               value={postGetId}
                               onChange={(e) => setPostGetId(e.target.value)}
                        />
                    </div>
                    <div className="post-details">
                        <h3>Post DetayÄ±:</h3>
                        <p>{selectedPost ? selectedPost.post : "Post bulunamadÄ±"}</p>

                    </div>
                    <div className="action-container">
                    <button  className="action-btn" onClick={handlePredictPost}>Tahmin Et</button>
                        <input
                            type="number"
                            placeholder="Post ID girin"
                            value={postPredictId}
                            onChange={(e) => setPostPredictId(e.target.value)}
                        />

                    </div>
                    <div className="action-container" >
                        <button style={{width:"1000px" , height:"200px" ,backgroundColor:"lightgrey",fontSize:"50px",fontStyle:"bold"}}  >{predict !== null ? predict : "Tahmin Verisi Yok"}</button>
                    </div>

                </div>
            </div>
        </div>

    );
};


export default App;
